{"version":3,"sources":["firebase.js","shuffle.js","Intro.jsx","Lobby.jsx","GameAndLobby.jsx","GameProvider.jsx"],"names":["FirebaseContext","FirebaseProvider","children","firebaseConfig","app","apps","length","initializeApp","shuffle","a","i","j","Math","floor","random","adjectives","require","nouns","playerName","setPlayerName","setGameId","onStart","gameIntro","JoinGame","setGame","gameId","loading","setLoading","adjectivesList","setAdjectivesList","nounList","setNounList","wordIndex","setWordIndex","firebase","addGame","Promise","resolve","then","database","ref","gameRef","push","name","alert","done","words","fail","e","console","warn","target","value","key","wordOne","wordTwo","getRandomCode","Lobby","gameState","players","Object","entries","map","player","ready","playerId","newPlayers","update","toggleReady","values","some","x","setGameState","setGameRef","on","snapshot","val","active","Children","child"],"mappings":"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","file":"GameProvider.js","sourceRoot":"src","sourcesContent":["import React, { createContext } from \"react\";\nimport app from \"firebase/app\";\n\nconst FirebaseContext = createContext(null);\nexport { FirebaseContext };\n\nconst FirebaseProvider = ({ children, firebaseConfig }) => {\n  if (!app.apps.length) {\n    app.initializeApp(firebaseConfig);\n  }\n\n  return (\n    <FirebaseContext.Provider value={app}>{children}</FirebaseContext.Provider>\n  );\n};\nexport { FirebaseProvider };\n","function shuffle(a) {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\nexport default shuffle;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport { FirebaseContext } from \"./firebase\";\nimport shuffle from \"./shuffle\";\n\nimport \"firebase/database\";\n\nimport oboe from \"oboe\";\nconst adjectives = require(\"./adjectives.data\");\nconst nouns = require(\"./nouns.data\");\n\nrequire(\"./intro.scss\");\n\nexport default ({\n  playerName,\n  setPlayerName,\n  setGameId,\n  onStart,\n  gameIntro,\n}) => (\n  <intro-block>\n    <h2>Welcome</h2>\n    {gameIntro}\n    <JoinGame\n      playerName={playerName}\n      setPlayerName={setPlayerName}\n      setGameId={setGameId}\n      onStart={onStart}\n    />\n  </intro-block>\n);\n\nconst JoinGame = ({\n  playerName,\n  setPlayerName,\n  setGameId: setGame,\n  onStart,\n}) => {\n  const [gameId, setGameId] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [adjectivesList, setAdjectivesList] = useState([]);\n  const [nounList, setNounList] = useState([]);\n  const [wordIndex, setWordIndex] = useState(0);\n\n  const firebase = useContext(FirebaseContext);\n\n  const addGame = () => {\n    if (gameId === \"\" || playerName === \"\") {\n      alert(\"You need both a name and gameId\");\n      return;\n    }\n    Promise.resolve()\n      .then(() => {\n        setLoading(true);\n      })\n      .then(() => {\n        return firebase.database().ref(`/${gameId}/players`);\n      })\n      .then((gameRef) => gameRef.push({ name: playerName }))\n      .then(() => {\n        return setGame(gameId);\n      });\n  };\n\n  useEffect(() => {\n    oboe(adjectives)\n      .done(function (words) {\n        setAdjectivesList(shuffle(words));\n      })\n      .fail(function (e) {\n        console.warn(e);\n      });\n    oboe(nouns)\n      .done(function (words) {\n        setNounList(shuffle(words));\n      })\n      .fail(function (e) {\n        console.warn(e);\n      });\n  }, []);\n\n  const getRandomCode = () => {\n    const wordOne = adjectivesList[wordIndex];\n    const wordTwo = nounList[wordIndex];\n    setWordIndex(wordIndex + 1);\n    setGameId(`${wordOne}-${wordTwo}`);\n  };\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        placeholder=\"Your name\"\n        value={playerName}\n        onChange={(e) => setPlayerName(e.target.value)}\n      ></input>\n      <input\n        type=\"text\"\n        placeholder=\"Enter the game code\"\n        value={gameId}\n        onChange={(e) => setGameId(e.target.value)}\n        onKeyPress={(e) => {\n          if (e.key == \"Enter\") {\n            addGame();\n          }\n        }}\n      ></input>\n      {!loading && (\n        <>\n          <button onClick={() => getRandomCode()}>\n            Suggest random game code\n          </button>\n          <button onClick={() => addGame()}>Play!</button>\n        </>\n      )}\n    </>\n  );\n};\n","import React from \"react\";\n\nconst Lobby = ({ gameState, gameRef, playerName, onStart }) => {\n  const startGame = () => {\n    if (Object.values(gameState.players).some((x) => !x.ready)) {\n      alert(\"Someone isn't ready\");\n      return;\n    }\n    onStart({ gameRef, gameState, playerName });\n  };\n\n  const toggleReady = (playerId) => {\n    let newPlayers = gameState.players;\n    newPlayers[playerId].ready = !newPlayers[playerId].ready;\n    gameRef.update({\n      players: newPlayers,\n    });\n  };\n\n  if (!gameState.players) {\n    return <players-list> No players yet </players-list>;\n  }\n\n  return (\n    <players-list>\n      <h2>Waiting to play</h2>\n      {Object.entries(gameState.players).map(([key, player]) => (\n        <label key={player.name}>\n          <player-name>\n            {player.name} is {player.ready ? \"ready\" : \"not ready\"}\n          </player-name>\n          {player.name === playerName && (\n            <button onClick={() => toggleReady(key)}>Toggle if Ready</button>\n          )}\n        </label>\n      ))}\n      <button\n        onClick={() => startGame()}\n        disabled={Object.values(gameState.players).some((x) => !x.ready)}\n      >\n        Start Game\n      </button>\n    </players-list>\n  );\n};\n\nexport default Lobby;\n","import React, {\n  useState,\n  useContext,\n  useEffect,\n  Children,\n  cloneElement,\n} from \"react\";\nimport { FirebaseContext } from \"./firebase\";\nimport \"firebase/database\";\nimport Lobby from \"./Lobby\";\n\nexport default ({ gameId, playerName, children, onStart }) => {\n  const firebase = useContext(FirebaseContext);\n  const [gameState, setGameState] = useState({});\n  const [gameRef, setGameRef] = useState();\n\n  useEffect(() => {\n    var gameRef = firebase.database().ref(`/${gameId}/`);\n    setGameRef(gameRef);\n    gameRef.on(\"value\", function (snapshot) {\n      setGameState(snapshot.val());\n    });\n  }, []);\n\n  return (\n    <game-container>\n      <game-title>\n        Game Id - {gameId} - playing as {playerName} <a href=\"/\">New Game</a>\n      </game-title>\n      {gameState.active ? (\n        Children.map(children, (child) =>\n          cloneElement(child, { gameState, gameRef, playerName })\n        )\n      ) : (\n        <Lobby\n          gameState={gameState}\n          gameRef={gameRef}\n          playerName={playerName}\n          onStart={onStart}\n        />\n      )}\n    </game-container>\n  );\n};\n","import React, { useState } from \"react\";\nimport { FirebaseProvider } from \"./firebase\";\nimport { useSearchParam } from \"react-use\";\nimport Intro from \"./Intro\";\nimport GameAndLobby from \"./GameAndLobby\";\n\nexport default ({\n  children,\n  onStart = () => {},\n  gameIntro,\n  firebaseConfig,\n}) => {\n  const [gameId, setGameId] = useState(useSearchParam(\"game\") || \"\");\n  const [playerName, setPlayerName] = useState(useSearchParam(\"name\") || \"\");\n\n  return (\n    <FirebaseProvider firebaseConfig={firebaseConfig}>\n      {gameId ? (\n        <GameAndLobby gameId={gameId} playerName={playerName} onStart={onStart}>\n          {children}\n        </GameAndLobby>\n      ) : (\n        <Intro\n          playerName={playerName}\n          setPlayerName={setPlayerName}\n          setGameId={setGameId}\n          gameIntro={gameIntro}\n        />\n      )}\n    </FirebaseProvider>\n  );\n};\n"]}